// <auto-generated />
using System;
using Coin_Exchange.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coin_Exchange.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517043615_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Asset", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("CoinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<double>("buyPrice")
                        .HasColumnType("float");

                    b.Property<double>("quantity")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("CoinId");

                    b.HasIndex("UserId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Coin", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("currentPrice")
                        .HasColumnType("float");

                    b.Property<double>("fullyDilutedValuation")
                        .HasColumnType("float");

                    b.Property<double>("high24h")
                        .HasColumnType("float");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("low24h")
                        .HasColumnType("float");

                    b.Property<long>("marketCap")
                        .HasColumnType("bigint");

                    b.Property<long>("marketCapChange24h")
                        .HasColumnType("bigint");

                    b.Property<double>("marketCapChangePercentage24h")
                        .HasColumnType("float");

                    b.Property<int>("marketCapRank")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("priceChange24h")
                        .HasColumnType("float");

                    b.Property<double>("priceChangePercentage24h")
                        .HasColumnType("float");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("totalVolume")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.ForgotPasswordToken", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sendTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("ForgotPasswordTokens");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Order", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("orderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("timestamps")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.OrderItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("CoinId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("buyPrice")
                        .HasColumnType("float");

                    b.Property<double>("quantity")
                        .HasColumnType("float");

                    b.Property<double>("sellPrice")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("CoinId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.PaymentDetails", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("accountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ifsc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.PaymentOrder", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("amount")
                        .HasColumnType("bigint");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("PaymentOrders");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.TwoFactorOtp", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("User")
                        .HasColumnType("bigint");

                    b.Property<string>("jwt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("User");

                    b.ToTable("TwoFactorOtps");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<bool>("IsEnable2FA")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Wallet", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("balance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.WalletTransaction", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("datel")
                        .HasColumnType("datetime2");

                    b.Property<string>("purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("transferId")
                        .HasColumnType("bigint");

                    b.Property<string>("walletTransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Watchlist", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.WatchlistCoin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CoinId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("WatchlistId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("WatchlistCoin", (string)null);
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Withdrawal", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Asset", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.Coin", "coin")
                        .WithMany()
                        .HasForeignKey("CoinId");

                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coin");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.ForgotPasswordToken", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Order", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.OrderItem", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.Coin", "coin")
                        .WithMany()
                        .HasForeignKey("CoinId");

                    b.HasOne("Coin_Exchange.Models.Modal.Order", "order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coin");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.PaymentDetails", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.PaymentOrder", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.TwoFactorOtp", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Wallet", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.WalletTransaction", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.Wallet", "wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("wallet");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Watchlist", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.WatchlistCoin", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.Coin", "Coin")
                        .WithMany("WatchlistCoins")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coin_Exchange.Models.Modal.Watchlist", "Watchlist")
                        .WithMany("WatchlistCoins")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Withdrawal", b =>
                {
                    b.HasOne("Coin_Exchange.Models.Modal.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Coin", b =>
                {
                    b.Navigation("WatchlistCoins");
                });

            modelBuilder.Entity("Coin_Exchange.Models.Modal.Watchlist", b =>
                {
                    b.Navigation("WatchlistCoins");
                });
#pragma warning restore 612, 618
        }
    }
}
